diff --git a/crosstool/BUILD.tpl b/crosstool/BUILD.tpl
index 7e9b2c0..a2c23f9 100644
--- a/crosstool/BUILD.tpl
+++ b/crosstool/BUILD.tpl
@@ -87,6 +87,9 @@ filegroup(
         ],
         libtool = "@build_bazel_apple_support//crosstool:exec_libtool",
         tool_paths_overrides = {%{tool_paths_overrides}},
+        conly_flags = [%{conly_flags}],
+        cxx_flags = [%{cxx_flags}],
+        link_flags = [%{link_flags}],
         module_map = ":modulemap",
         wrapped_clang = "@build_bazel_apple_support//crosstool:exec_wrapped_clang",
         wrapped_clang_pp = "@build_bazel_apple_support//crosstool:exec_wrapped_clang_pp",
diff --git a/crosstool/cc_toolchain_config.bzl b/crosstool/cc_toolchain_config.bzl
index 1ae7198..0ec89ba 100644
--- a/crosstool/cc_toolchain_config.bzl
+++ b/crosstool/cc_toolchain_config.bzl
@@ -176,6 +176,12 @@ please file an issue at https://github.com/bazelbuild/apple_support/issues/new
         ACTION_NAMES.cpp_link_nodeps_dynamic_library,
     ]
 
+    lto_index_actions = [
+        ACTION_NAMES.lto_index_for_executable,
+        ACTION_NAMES.lto_index_for_dynamic_library,
+        ACTION_NAMES.lto_index_for_nodeps_dynamic_library,
+    ]
+
     strip_action = action_config(
         action_name = ACTION_NAMES.strip,
         flag_sets = [
@@ -987,6 +993,14 @@ please file an issue at https://github.com/bazelbuild/apple_support/issues/new
         name = "default_link_flags",
         enabled = True,
         flag_sets = [
+            flag_set(
+                actions = all_link_actions + lto_index_actions,
+                flag_groups = ([
+                    flag_group(
+                        flags = ctx.attr.link_flags,
+                    ),
+                ] if ctx.attr.link_flags else []),
+            ),
             flag_set(
                 actions = _DYNAMIC_LINK_ACTIONS,
                 flag_groups = [
@@ -1973,6 +1987,14 @@ please file an issue at https://github.com/bazelbuild/apple_support/issues/new
                 flag_groups = [flag_group(flags = ["-g"])],
                 with_features = [with_feature_set(features = ["dbg"])],
             ),
+            flag_set(
+                actions = [ACTION_NAMES.c_compile],
+                flag_groups = ([
+                    flag_group(
+                        flags = ctx.attr.conly_flags,
+                    ),
+                ] if ctx.attr.conly_flags else []),
+            ),
             flag_set(
                 actions = [
                     ACTION_NAMES.linkstamp_compile,
@@ -1983,7 +2005,11 @@ please file an issue at https://github.com/bazelbuild/apple_support/issues/new
                     ACTION_NAMES.lto_backend,
                     ACTION_NAMES.clif_match,
                 ],
-                flag_groups = [flag_group(flags = ["-std=c++17"])],
+                flag_groups = ([
+                    flag_group(
+                        flags = ctx.attr.cxx_flags,
+                    ),
+                ] if ctx.attr.cxx_flags else []),
             ),
         ],
     )
@@ -2725,6 +2751,9 @@ cc_toolchain_config = rule(
             mandatory = True,
         ),
         "module_map": attr.label(),
+        "cxx_flags": attr.string_list(),
+        "conly_flags": attr.string_list(),
+        "link_flags": attr.string_list(),
         "tool_paths_overrides": attr.string_dict(),
         "wrapped_clang": attr.label(
             allow_single_file = True,
diff --git a/crosstool/osx_cc_configure.bzl b/crosstool/osx_cc_configure.bzl
index 6ed0142..4f478a7 100644
--- a/crosstool/osx_cc_configure.bzl
+++ b/crosstool/osx_cc_configure.bzl
@@ -20,6 +20,94 @@ load(
 )
 load("@bazel_tools//tools/osx:xcode_configure.bzl", "run_xcode_locator")
 
+def get_env_var(repository_ctx, name, default = None, enable_warning = True):
+    """Find an environment variable in system path. Doesn't %-escape the value!
+
+    Args:
+      repository_ctx: The repository context.
+      name: Name of the environment variable.
+      default: Default value to be used when such environment variable is not present.
+      enable_warning: Show warning if the variable is not present.
+    Returns:
+      value of the environment variable or default.
+    """
+
+    if name in repository_ctx.os.environ:
+        return repository_ctx.os.environ[name]
+    if default != None:
+        if enable_warning:
+            auto_configure_warning("'%s' environment variable is not set, using '%s' as default" % (name, default))
+        return default
+    auto_configure_fail("'%s' environment variable is not set" % name)
+    return None
+
+def split_escaped(string, delimiter):
+    """Split string on the delimiter unless %-escaped.
+
+    Examples:
+      Basic usage:
+        split_escaped("a:b:c", ":") -> [ "a", "b", "c" ]
+
+      Delimiter that is not supposed to be splitten on has to be %-escaped:
+        split_escaped("a%:b", ":") -> [ "a:b" ]
+
+      Literal % can be represented by escaping it as %%:
+        split_escaped("a%%b", ":") -> [ "a%b" ]
+
+      Consecutive delimiters produce empty strings:
+        split_escaped("a::b", ":") -> [ "a", "", "", "b" ]
+
+    Args:
+      string: The string to be split.
+      delimiter: Non-empty string not containing %-sign to be used as a
+          delimiter.
+
+    Returns:
+      A list of substrings.
+    """
+    if delimiter == "":
+        fail("Delimiter cannot be empty")
+    if delimiter.find("%") != -1:
+        fail("Delimiter cannot contain %-sign")
+
+    i = 0
+    result = []
+    accumulator = []
+    length = len(string)
+    delimiter_length = len(delimiter)
+
+    if not string:
+        return []
+
+    # Iterate over the length of string since Starlark doesn't have while loops
+    for _ in range(length):
+        if i >= length:
+            break
+        if i + 2 <= length and string[i:i + 2] == "%%":
+            accumulator.append("%")
+            i += 2
+        elif (i + 1 + delimiter_length <= length and
+              string[i:i + 1 + delimiter_length] == "%" + delimiter):
+            accumulator.append(delimiter)
+            i += 1 + delimiter_length
+        elif i + delimiter_length <= length and string[i:i + delimiter_length] == delimiter:
+            result.append("".join(accumulator))
+            accumulator = []
+            i += delimiter_length
+        else:
+            accumulator.append(string[i])
+            i += 1
+
+    # Append the last group still in accumulator
+    result.append("".join(accumulator))
+    return result
+
+def get_starlark_list(values):
+    """Convert a list of string into a string that can be passed to a rule attribute."""
+    if not values:
+        return ""
+    return "\"" + "\",\n    \"".join(values) + "\""
+
 def _get_escaped_xcode_cxx_inc_directories(repository_ctx, xcode_toolchains):
     """Compute the list of default C++ include paths on Xcode-enabled darwin.
 
@@ -112,6 +200,26 @@ def configure_osx_toolchain(repository_ctx):
         escaped_cxx_include_directories.append(("            \"%s\"," % path))
     if xcodeloc_err:
         escaped_cxx_include_directories.append("            # Error: " + xcodeloc_err)
+
+    conly_opts = split_escaped(get_env_var(
+        repository_ctx,
+        "BAZEL_CONLYOPTS",
+        "",
+        False,
+    ), ":")
+    cxx_opts = split_escaped(get_env_var(
+        repository_ctx,
+        "BAZEL_CXXOPTS",
+        "-std=c++17",
+        False,
+    ), ":")
+    link_opts = split_escaped(get_env_var(
+        repository_ctx,
+        "BAZEL_LINKOPTS",
+        "",
+        False,
+    ), ":")
+
     repository_ctx.template(
         "BUILD",
         build_template,
@@ -123,6 +231,9 @@ def configure_osx_toolchain(repository_ctx):
             "%{tool_paths_overrides}": ",\n            ".join(
                 ['"%s": "%s"' % (k, v) for k, v in tool_paths.items()],
             ),
+            "%{conly_flags}": get_starlark_list(conly_opts),
+            "%{cxx_flags}": get_starlark_list(cxx_opts),
+            "%{link_flags}": get_starlark_list(link_opts),
         },
     )
 
diff --git a/crosstool/setup.bzl b/crosstool/setup.bzl
index 5e06d70..33ba80c 100644
--- a/crosstool/setup.bzl
+++ b/crosstool/setup.bzl
@@ -61,6 +61,9 @@ _apple_cc_autoconf = repository_rule(
         "USE_CLANG_CL",  # Kept as a hack for those who rely on this invaliding the toolchain
         "USER",  # Used to allow paths for custom toolchains to be used by C* compiles
         "XCODE_VERSION",  # Force re-computing the toolchain by including the current Xcode version info in an env var
+        "BAZEL_CONLYOPTS",
+        "BAZEL_CXXOPTS",
+        "BAZEL_LINKOPTS",
     ],
     implementation = _apple_cc_autoconf_impl,
     configure = True,
